{"version":3,"sources":["Components/voting_page.js","App.js","serviceWorker.js","index.js"],"names":["candidate_email","state","redirect","onSubmithandler","e","preventDefault","name","target","value","email","vote","reset","axios","post","then","data","console","log","result","swal","getState","catch","err","dataDoughnut","labels","datasets","backgroundColor","hoverBackgroundColor","get","setState","Yes","No","this","className","onSubmit","placeholder","type","required","id","disabled","selected","options","responsive","React","Component","App","path","component","Voting_page","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mUA4HeA,E,4MA7GbC,MAAQ,CAAEC,SAAU,I,EACpBC,gBAAkB,SAACC,GACjBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,OAAOD,KAAKE,MACrBC,EAAQL,EAAEG,OAAOE,MAAMD,MACvBE,EAAON,EAAEG,OAAOG,KAAKF,MAC3BJ,EAAEG,OAAOI,QAGTC,IACGC,KAAK,8CAA+C,CACnDP,KAAMA,EACNG,MAAOA,EACPC,KAAMA,IAEPI,MAAK,SAAAC,GACJC,QAAQC,IAAI,cAAeF,GACvBA,EAAKA,KAAKG,QACZC,IAAK,qBAAsB,GAAI,WAC/B,EAAKC,YAELD,IAAK,+BAAgC,GAAI,QAAS,OAKrDE,OAAM,SAAAC,GACLN,QAAQC,IAAIK,O,EAIlBrB,MAAQ,CACNsB,aAAc,CACZC,OAAQ,CAAC,MAAO,MAChBC,SAAU,CACR,CACEV,KAAM,CAAC,EAAG,GACVW,gBAAiB,CAAC,UAAW,WAC7BC,qBAAsB,CACpB,UACA,e,EAWVP,SAAW,WACTR,IAAMgB,IAAI,mCACTd,MAAK,SAACC,GAEL,EAAKc,SAAU,CACbN,aAAc,CACZC,OAAQ,CAAC,MAAO,MAChBC,SAAU,CACR,CACEV,KAAM,CAACA,EAAKA,KAAKe,IAAKf,EAAKA,KAAKgB,IAChCL,gBAAiB,CAAC,UAAW,WAC7BC,qBAAsB,CACpB,UACA,oB,kEAhBZK,KAAKZ,a,+BA2BL,OACE,6BACA,6BACA,yBAAKa,UAAU,kBACZD,KAAK/B,MAAMC,SACV,yBAAK+B,UAAU,kBACX,wBAAIA,UAAU,WAAd,eACA,0BAAMC,SAAYF,KAAK7B,iBACrB,6BAAK,2BAAOgC,YAAY,iBAAiB7B,KAAK,OAAO2B,UAAU,gBAAgBG,KAAK,OAAOC,UAAQ,KACnG,6BAAK,2BAAOD,KAAK,QAAQ9B,KAAK,QAAQgC,GAAG,QAAQH,YAAY,kBAAkBF,UAAU,sBAAsBI,UAAQ,KACvH,6BACA,kBAAC,IAAD,CAASJ,UAAU,WAAnB,2BAEE,4BAAQA,UAAU,gCAAgC3B,KAAK,OAAO+B,UAAQ,GACtE,4BAAQ7B,MAAM,GAAG+B,UAAQ,EAACC,UAAQ,GAAlC,sBACE,4BAAQhC,MAAM,OAAd,OACA,4BAAQA,MAAM,MAAd,QAGJ,4BAAQyB,UAAU,eAAeG,KAAK,UAAtC,WAEF,6BACA,kBAAC,IAAD,KACI,wBAAIH,UAAU,QAAd,gBACA,kBAAC,IAAD,CAAUlB,KAAMiB,KAAK/B,MAAMsB,aAAckB,QAAS,CAAEC,YAAY,a,GAtGpDC,IAAMC,W,eCQrBC,EAhBf,uKAEI,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,IAC3B,kBAAC,IAAD,CAAUC,GAAG,QAGf,kCAVR,GAAyBN,IAAMC,WCOXM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd3C,OAAM,SAAA4C,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.495fab5f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n  MDBCard,\n} from \"mdbreact\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport axios from \"axios\";\nimport swal from \"sweetalert\";\nimport { Doughnut } from \"react-chartjs-2\";\n\n\nclass candidate_email extends React.Component {\n\n  state = { redirect: \"\" };\n  onSubmithandler = (e) => {\n    e.preventDefault()\n    // console.log(e.target.name.value, \"e\")\n    const name = e.target.name.value\n    const email = e.target.email.value\n    const vote = e.target.vote.value\n    e.target.reset()\n    \n\n    axios\n      .post(\"http://52.66.237.30:3051/candidate_register\", {\n        name: name,\n        email: email,\n        vote: vote\n      })\n      .then(data => {\n        console.log(\"hello anand\", data);\n        if (data.data.result) {\n          swal(\"Thank's for voting\", \"\", \"success\")\n          this.getState()\n        } else {\n          swal(\"This candidate already voted\", \"\", \"error\", {\n            \n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  state = {\n    dataDoughnut: {\n      labels: [\"Yes\", \"No\"],\n      datasets: [\n        {\n          data: [0, 0],\n          backgroundColor: [\"#46BFBD\", \"#F7464A\"],\n          hoverBackgroundColor: [\n            \"#5AD3D1\",\n            \"#FF5A5E\"\n          ]\n        }\n      ]\n    }\n  }\n\n  componentDidMount() {\n    this.getState()\n  }\n\n  getState = () => {\n    axios.get(\"http://52.66.237.30:3051/result\")\n    .then((data) => {\n      // console.log(data, \"data\");\n      this.setState( {\n        dataDoughnut: {\n          labels: [\"Yes\", \"No\"],\n          datasets: [\n            {\n              data: [data.data.Yes, data.data.No],\n              backgroundColor: [\"#46BFBD\", \"#F7464A\"],\n              hoverBackgroundColor: [\n                \"#5AD3D1\",\n                \"#FF5A5E\"\n              ]\n            }\n          ]\n        }\n      }\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div>\n      <br></br>\n      <div className=\"OuterContainer\">\n        {this.state.redirect}\n          <div className=\"InnerContainer\">\n              <h1 className=\"heading\">Please Vote</h1>\n              <form onSubmit = {this.onSubmithandler}>\n                <div><input placeholder=\"Candidate Name\" name=\"name\" className=\"candidateName\" type=\"text\" required /></div>            \n                <div><input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Candidate Email\" className=\"candidateName mt-20\" required/></div>\n                <br></br>\n                <MDBCard className=\"mdbcard\">\n                  Should lockdown be open?\n                  <select className=\"browser-default custom-select\" name=\"vote\" required>\n                  <option value=\"\" disabled selected>Select your option</option>\n                    <option value=\"Yes\">Yes</option>\n                    <option value=\"No\">No</option>\n                  </select>\n                </MDBCard>\n                <button className=\"button mt-20\" type=\"submit\">Submit</button>\n              </form>\n              <br></br>\n              <MDBCard >\n                  <h3 className=\"mt-5\">Voting chart</h3>\n                  <Doughnut data={this.state.dataDoughnut} options={{ responsive: true }} />\n                </MDBCard>\n          </div>    \n        </div>\n        </div>\n    )\n  }\n}\n\nexport default candidate_email","import React from 'react';\nimport './App.css';\nimport Voting_page from './Components/voting_page';\n\nimport { Route, BrowserRouter as Router, Switch, Redirect } from 'react-router-dom'\nexport class App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>  \n          <Route path=\"/\" component={Voting_page} />\n          <Redirect to=\"/\"/>\n          </Switch>\n        </Router>\n        <br/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}